{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction FELionGUI is a spectrum analysis application designed specifically for use with the FELion instrument at the FELIX labaratory ( Dr. Sandra Br\u00fcnken group) , Radboud University in Nijmegen. The software is developed by A.N. Marimuthu . It provides a user-friendly interface for analyzing spectra obtained from the FELion instrument. Download FELionGUIv4 Fig 1: The FELion GUI v4 - Home Screen","title":"Introduction"},{"location":"#introduction","text":"FELionGUI is a spectrum analysis application designed specifically for use with the FELion instrument at the FELIX labaratory ( Dr. Sandra Br\u00fcnken group) , Radboud University in Nijmegen. The software is developed by A.N. Marimuthu . It provides a user-friendly interface for analyzing spectra obtained from the FELion instrument. Download FELionGUIv4 Fig 1: The FELion GUI v4 - Home Screen","title":"Introduction"},{"location":"about/","text":"About FELion GUI is a desktop application built using Tauri (v1.2) and Svelte (v3) as a front-end UI/UX and Python (v3.11) as a back-end for scientific computational purpose. Front-end Tauri Tauri is a framework for building lightweight, secure, and fast desktop applications using web technologies such as HTML , CSS , and JavaScript . It is designed to be easy to use and allow developers to build native-like applications that can be deployed on multiple platforms, including Windows, macOS, and Linux. One of the main features of Tauri is its ability to create applications that are both web-based and natively installed on the user's device. This allows developers to leverage the power and flexibility of the web while also providing a native experience for the end user. Svelte Svelte, on the other hand, is a JavaScript framework for building user interfaces that allows developers to write efficient and expressive code that compiles to small, standalone modules. By using Tauri and Svelte together, developers can create powerful and performant desktop applications that leverage the strengths of both technologies. Other technologies It would not have been possible to build this software without other Open Source technologies such as vite and plotly , and many other CSS and JS libraries. Back-end Python The computational processes in the FELion program are heavily depend on python, especially NumPy and Scipy libraries. Python is a popular programming language that is widely used in scientific computing. It is known for its simplicity, readability, and flexibility, making it a great choice for data analysis and numerical computations. Python has a large and active community of users and developers, which has led to the creation of many libraries and frameworks that facilitate scientific computing tasks. Two of the most commonly used libraries for scientific computing in Python are NumPy and SciPy. NumPy is a library for working with large, multi-dimensional arrays and matrices of numerical data, while SciPy is a library that provides a collection of algorithms and functions for scientific computing tasks, such as optimization, linear algebra, and statistics. Together, these libraries provide a powerful toolkit for scientific computing in Python.","title":"About"},{"location":"about/#about","text":"FELion GUI is a desktop application built using Tauri (v1.2) and Svelte (v3) as a front-end UI/UX and Python (v3.11) as a back-end for scientific computational purpose.","title":"About"},{"location":"about/#front-end","text":"","title":"Front-end"},{"location":"about/#tauri","text":"Tauri is a framework for building lightweight, secure, and fast desktop applications using web technologies such as HTML , CSS , and JavaScript . It is designed to be easy to use and allow developers to build native-like applications that can be deployed on multiple platforms, including Windows, macOS, and Linux. One of the main features of Tauri is its ability to create applications that are both web-based and natively installed on the user's device. This allows developers to leverage the power and flexibility of the web while also providing a native experience for the end user.","title":"Tauri "},{"location":"about/#svelte","text":"Svelte, on the other hand, is a JavaScript framework for building user interfaces that allows developers to write efficient and expressive code that compiles to small, standalone modules. By using Tauri and Svelte together, developers can create powerful and performant desktop applications that leverage the strengths of both technologies.","title":"Svelte "},{"location":"about/#other-technologies","text":"It would not have been possible to build this software without other Open Source technologies such as vite and plotly , and many other CSS and JS libraries.","title":"Other technologies"},{"location":"about/#back-end","text":"","title":"Back-end"},{"location":"about/#python","text":"The computational processes in the FELion program are heavily depend on python, especially NumPy and Scipy libraries. Python is a popular programming language that is widely used in scientific computing. It is known for its simplicity, readability, and flexibility, making it a great choice for data analysis and numerical computations. Python has a large and active community of users and developers, which has led to the creation of many libraries and frameworks that facilitate scientific computing tasks. Two of the most commonly used libraries for scientific computing in Python are NumPy and SciPy. NumPy is a library for working with large, multi-dimensional arrays and matrices of numerical data, while SciPy is a library that provides a collection of algorithms and functions for scientific computing tasks, such as optimization, linear algebra, and statistics. Together, these libraries provide a powerful toolkit for scientific computing in Python.","title":"Python "},{"location":"layout/","text":"General The general page layout for Normline , Masspec , Timescan and THz are very similar such as to browse to the required location and select corresponding files types in file-browser . Fig 2: The general page layout File browser As shown in Fig 2, the general layout with a file-browser column on the left and a main-container on the right typically consists of a split-screen interface. The file-browser column is typically a vertical column that takes up a portion of the left side of the screen. It displays a hierarchical tree structure of the files and directories on the computer or device, allowing the user to navigate through the file system and locate specific files. The icons as shown in top-row of file-browser describes the following: Icons Description navigate back update and reload files in current location sort files by name select all files search to filter files Note: The file-browser only shows file-types corresponding to the current page and not all files available in the current location. File types Each page may use its own specific file types, and this information is provided in the following table. file-type (i.e., file extension) Description Page *.felix FELIX IR-data Normline *.ofelix OPO IR-data Normline *.mass Masspectrum data Masspec *.scan Timescan data Timescan *.thz THz data THz Main container The main-container on the right takes up the remainder of the screen. The top row called widget-row consists of icon-buttons with function as described below: icon-buttons Description Full screen i.e., shows only plotted graphs Fix the plotted graph width to the available scrren width and toggle the visibility of labelled column from displaying pop-up modal with special elements which depends on selected page After the icon-buttons row, the next immediate row usually display additional information such as the location address, which shows the path to the current directory, and browse location buttons, which allow the user to navigate to different parts of the file system. This row is followed by additional row(s) depends on current active page. This entire collection of top row is referred as initial-button-rows . Following initial-button-rows , the rest of the space of the main-container include a display area for the selected file, controls for interacting with the plotted file data, and output areas for displaying the results of the processing or post-processing graph plots.","title":"Layout"},{"location":"layout/#general","text":"The general page layout for Normline , Masspec , Timescan and THz are very similar such as to browse to the required location and select corresponding files types in file-browser . Fig 2: The general page layout","title":"General"},{"location":"layout/#file-browser","text":"As shown in Fig 2, the general layout with a file-browser column on the left and a main-container on the right typically consists of a split-screen interface. The file-browser column is typically a vertical column that takes up a portion of the left side of the screen. It displays a hierarchical tree structure of the files and directories on the computer or device, allowing the user to navigate through the file system and locate specific files. The icons as shown in top-row of file-browser describes the following: Icons Description navigate back update and reload files in current location sort files by name select all files search to filter files Note: The file-browser only shows file-types corresponding to the current page and not all files available in the current location.","title":"File browser"},{"location":"layout/#file-types","text":"Each page may use its own specific file types, and this information is provided in the following table. file-type (i.e., file extension) Description Page *.felix FELIX IR-data Normline *.ofelix OPO IR-data Normline *.mass Masspectrum data Masspec *.scan Timescan data Timescan *.thz THz data THz","title":"File types"},{"location":"layout/#main-container","text":"The main-container on the right takes up the remainder of the screen. The top row called widget-row consists of icon-buttons with function as described below: icon-buttons Description Full screen i.e., shows only plotted graphs Fix the plotted graph width to the available scrren width and toggle the visibility of labelled column from displaying pop-up modal with special elements which depends on selected page After the icon-buttons row, the next immediate row usually display additional information such as the location address, which shows the path to the current directory, and browse location buttons, which allow the user to navigate to different parts of the file system. This row is followed by additional row(s) depends on current active page. This entire collection of top row is referred as initial-button-rows . Following initial-button-rows , the rest of the space of the main-container include a display area for the selected file, controls for interacting with the plotted file data, and output areas for displaying the results of the processing or post-processing graph plots.","title":"Main container"},{"location":"masspec/","text":"","title":"Masspec"},{"location":"misc/","text":"We can link to that heading from another page too. This works the same as a normal link to that heading . Link image Mermaid graph demo graph TD A --> B --> C graph LR hello[\"<b>Hello</b>\"] --> world[\"<big><i>World</i></big>\"] world --> mermaid[mermaid web site] graph TD A[Client] --> B[Load Balancer] B --> C[Server01] B --> D[Server02] graph TD; A-->B; A-->C; B-->D; C-->D; D-->A; sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts <br/>prevail! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good!","title":"Misc"},{"location":"misc/#mermaid-graph-demo","text":"graph TD A --> B --> C graph LR hello[\"<b>Hello</b>\"] --> world[\"<big><i>World</i></big>\"] world --> mermaid[mermaid web site] graph TD A[Client] --> B[Load Balancer] B --> C[Server01] B --> D[Server02] graph TD; A-->B; A-->C; B-->D; C-->D; D-->A; sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts <br/>prevail! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good!","title":"Mermaid graph demo"},{"location":"powerfile/","text":"Powerfile","title":"Powerfile"},{"location":"powerfile/#powerfile","text":"","title":"Powerfile"},{"location":"settings/","text":"Settings","title":"Settings"},{"location":"settings/#settings","text":"","title":"Settings"},{"location":"thz/","text":"THz","title":"THz"},{"location":"thz/#thz","text":"","title":"THz"},{"location":"timescan/","text":"Timescan","title":"Timescan"},{"location":"timescan/#timescan","text":"","title":"Timescan"},{"location":"kinetics/ROSAA/","text":"","title":"ROSAA"},{"location":"kinetics/timescan/","text":"","title":"Timescan"},{"location":"normline/","text":"Normline","title":"Normline"},{"location":"normline/#normline","text":"","title":"Normline"},{"location":"normline/baseline/","text":"","title":"Baseline"},{"location":"normline/felix_plot/","text":"","title":"Felix plot"},{"location":"normline/opo_plot/","text":"","title":"Opo plot"},{"location":"normline/theory_plot/","text":"","title":"Theory plot"}]}